<modification>
  <id>Checkout Saved Cart</id>
  <version>1.0</version>
  <vqmver>2.3.2</vqmver>
  <author>mike@mzoo.org</author>

    <file name="admin/view/template/sale/customer_list.tpl">   
    <operation>
      <search position="replace"><![CDATA[<div class="buttons"><a onclick="$('form').attr('action', '<?php echo $approve; ?>'); $('form').submit();" class="button"><?php echo $button_approve; ?></a><a href="<?php echo $insert; ?>" class="button"><?php echo $button_insert; ?></a><a onclick="$('form').attr('action', '<?php echo $delete; ?>'); $('form').submit();" class="button"><?php echo $button_delete; ?></a></div>]]></search>
      <add><![CDATA[
<script type="text/javascript">
//-----------------------------------------
// Confirm Cart Process
//-----------------------------------------
$(document).ready(function(){
    // Confirm Process
    $('#form').submit(function(){
        if ($(this).attr('action').indexOf('process_carts',1) != -1) {
            if (!confirm("Are you sure you're ready to process selected carts?")) {
                return false;
            }
        }
     });
  });
</script>
      <div class="buttons"><a onclick="$('form').attr('action', '<?php echo $process_carts_action; ?>'); $('form').submit();" class="button"><?php echo "Process Carts" ?></a><a onclick="$('form').attr('action', '<?php echo $approve; ?>'); $('form').submit();" class="button"><?php echo $button_approve; ?></a><a href="<?php echo $insert; ?>" class="button"><?php echo $button_insert; ?></a><a onclick="$('form').attr('action', '<?php echo $delete; ?>'); $('form').submit();" class="button"><?php echo $button_delete; ?></a></div>]]></add>   
	</operation>
  </file>
      
 <file name="admin/controller/sale/customer.php">   

    <operation>
      <search position="before"><![CDATA[$this->data['approve'] = $this->url->link('sale/customer/approve', 'token=' . $this->session->data['token'] . $url, 'SSL');
		]]></search>
      <add><![CDATA[
    $this->data['process_carts_action'] = $this->url->link('sale/customer/process_carts', 'token=' . $this->session->data['token'] . $url, 'SSL');]]></add>
	</operation>

	<operation>
      <search position="before"><![CDATA[public function insert() {]]></search>
	  <add><![CDATA[  
                       
    public function process_carts() {
            $this->load->model('sale/order');
            $this->load->model('sale/customer');
            $this->load->language('sale/customer');

            $customers = $this->model_sale_customer->getCustomers();
            if (isset($this->request->post['selected']) && $this->validateDelete()) {
				foreach ($this->request->post['selected'] as $customer_id) {
					$customer = $this->model_sale_customer->getCustomer($customer_id);

					if(!$customer['cart'] || $customer['cart'] == '' || empty($customer['cart']) || $customer['cart'] == 'a:0:{}')
						continue;
			
					$products = $this->getSavedCart($customer);
					
					if(isset($products['cart_order_total']) && $products['cart_order_total'] != ''){
					
						$full_order_total = array(
							array('code'  => 'total',
								'title'  => 'Total',
								'text'   => '$' . money_format('%i', $products['cart_order_total']),
								'value' => $products['cart_order_total'],
								'sort_order' => '9'
								),
							array('code'  => 'sub-total',
								'title'  => 'Sub-Total',
								'text'   => '$' . money_format('%i', $products['cart_order_total']),
								'value' => $products['cart_order_total'],
								'sort_order' => '1'
								)
							);
						
						$order_details = array(
							'store_id' => 1,
							'customer_id' => $customer['customer_id'],
							'customer_group_id' => 1,
							'firstname' => $customer['firstname'],
							'lastname' => $customer['lastname'],
							'email' => $customer['email'],
							'telephone' => $customer['telephone'],
							'fax' => $customer['fax'],
							'payment_firstname' => $customer['firstname'],
							'payment_lastname' => $customer['lastname'],
							'payment_company' =>  'Default',
							'payment_company_id' =>   'default',
							'payment_tax_id' =>   'default',
							'payment_address_1' =>   'Default',
							'payment_address_2' =>   '',
							'payment_city' =>   'Default',
							'payment_postcode' =>   '00000',
							'payment_country_id' =>   '223',
							'payment_zone_id' =>   '3630',
							'payment_method' =>   'Cash On Delivery',
							'payment_code' =>   'cod',
							'shipping_firstname' =>   $customer['firstname'],
							'shipping_lastname' =>   $customer['lastname'],
							'shipping_company' =>   'Default',
							'shipping_address_1' =>   'Default',
							'shipping_address_2' =>   '',
							'shipping_city' =>   'Default',
							'shipping_postcode' =>   '00000',
							'shipping_country_id' =>   '223',
							'shipping_zone_id' =>   '3630',
							'shipping_method' =>   'Flat Shipping Rate',
							'shipping_code' =>   'flat.flat',
							'comment' =>   '',
							'order_status_id' =>   1,
							'affiliate_id' =>   '',
							'order_total' => $full_order_total,
							'order_product' => $products
						);
										
							$this->model_sale_order->addOrder($order_details);
							$this->clearCart($customer['customer_id']);
							$this->session->data['success'] = sprintf($this->language->get('text_success'));
						}else{
						continue;
						}				
					}
			}
			/*$url .= 'filter_saved_cart=1';*/
            $this->redirect($this->url->link('sale/customer' , 'filter_saved_cart=1&token=' . $this->session->data['token'] . $url, 'SSL'));
        }
    
    public function pr($data){
            echo "<pre>";
            print_r($data);
            echo "</pre>"; 
        }
        
    public function write_to_file($message){
        $handle = fopen("/Applications/MAMP/logs/open_cart_reader.txt", "a+");
        fwrite($handle, "\nMessage:\t " . $message);
        fclose($handle);
    }
    
    public function clearCart($customer_id){
        $this->db->query("UPDATE " . DB_PREFIX . "customer SET `cart` = '' WHERE `customer_id` = '$customer_id'");				
    }
    
    public function getSavedCart($customer) {
	    
		$customer_cart = array();

			$total_cart = 0;
							
			  foreach (unserialize($customer['cart']) as $key => $quantity) {

				$product = explode(':', $key);
				$product_id = $product[0];
				$stock = true;
		  
						// Options
						if (isset($product[1]) && $product[1] != '') {
							$options = unserialize(base64_decode($product[1]));
						} else {
							$options = array();
						} 
						
						$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.date_available <= NOW() AND p.status = '1'");
						
						if ($product_query->num_rows) {
							$option_price = 0;
							$option_points = 0;
							$option_weight = 0;
			
							$option_data = array();
			                if (isset($options[0])) {
                                foreach ($options as $product_option_id => $option_value) {
			                
                                    $option_query = $this->db->query("SELECT po.product_option_id, po.option_id, od.name, o.type FROM " . DB_PREFIX . "product_option po LEFT JOIN `" . DB_PREFIX . "option` o ON (po.option_id = o.option_id) LEFT JOIN " . DB_PREFIX . "option_description od ON (o.option_id = od.option_id) WHERE po.product_option_id = '" . (int)$product_option_id . "' AND po.product_id = '" . (int)$product_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . "'");
                                
                                    if ($option_query->num_rows) {
                                        if ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio' || $option_query->row['type'] == 'image') {
                                            $option_value_query = $this->db->query("SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '" . (int)$option_value . "' AND pov.product_option_id = '" . (int)$product_option_id . "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
                                        
                                            if ($option_value_query->num_rows) {
                                                if ($option_value_query->row['price_prefix'] == '+') {
                                                    $option_price += $option_value_query->row['price'];
                                                } elseif ($option_value_query->row['price_prefix'] == '-') {
                                                    $option_price -= $option_value_query->row['price'];
                                                }
            
                                                if ($option_value_query->row['points_prefix'] == '+') {
                                                    $option_points += $option_value_query->row['points'];
                                                } elseif ($option_value_query->row['points_prefix'] == '-') {
                                                    $option_points -= $option_value_query->row['points'];
                                                }
                                                                        
                                                if ($option_value_query->row['weight_prefix'] == '+') {
                                                    $option_weight += $option_value_query->row['weight'];
                                                } elseif ($option_value_query->row['weight_prefix'] == '-') {
                                                    $option_weight -= $option_value_query->row['weight'];
                                                }
                                            
                                                if ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {
                                                    $stock = false;
                                                }
                                            
                                                $option_data[] = array(
                                                    'product_option_id'       => $product_option_id,
                                                    'product_option_value_id' => $option_value,
                                                    'option_id'               => $option_query->row['option_id'],
                                                    'option_value_id'         => $option_value_query->row['option_value_id'],
                                                    'name'                    => $option_query->row['name'],
                                                    'option_value'            => $option_value_query->row['name'],
                                                    'type'                    => $option_query->row['type'],
                                                    'quantity'                => $option_value_query->row['quantity'],
                                                    'subtract'                => $option_value_query->row['subtract'],
                                                    'price'                   => $option_value_query->row['price'],
                                                    'price_prefix'            => $option_value_query->row['price_prefix'],
                                                    'points'                  => $option_value_query->row['points'],
                                                    'points_prefix'           => $option_value_query->row['points_prefix'],									
                                                    'weight'                  => $option_value_query->row['weight'],
                                                    'weight_prefix'           => $option_value_query->row['weight_prefix']
                                                );								
                                            }
                                        } elseif ($option_query->row['type'] == 'checkbox' && is_array($option_value)) {
                                            foreach ($option_value as $product_option_value_id) {
                                                $option_value_query = $this->db->query("SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '" . (int)$product_option_value_id . "' AND pov.product_option_id = '" . (int)$product_option_id . "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
                                            
                                                if ($option_value_query->num_rows) {
                                                    if ($option_value_query->row['price_prefix'] == '+') {
                                                        $option_price += $option_value_query->row['price'];
                                                    } elseif ($option_value_query->row['price_prefix'] == '-') {
                                                        $option_price -= $option_value_query->row['price'];
                                                    }
            
                                                    if ($option_value_query->row['points_prefix'] == '+') {
                                                        $option_points += $option_value_query->row['points'];
                                                    } elseif ($option_value_query->row['points_prefix'] == '-') {
                                                        $option_points -= $option_value_query->row['points'];
                                                    }
                                                                            
                                                    if ($option_value_query->row['weight_prefix'] == '+') {
                                                        $option_weight += $option_value_query->row['weight'];
                                                    } elseif ($option_value_query->row['weight_prefix'] == '-') {
                                                        $option_weight -= $option_value_query->row['weight'];
                                                    }
                                                
                                                    if ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {
                                                        $stock = false;
                                                    }
                                                
                                                    $option_data[] = array(
                                                        'product_option_id'       => $product_option_id,
                                                        'product_option_value_id' => $product_option_value_id,
                                                        'option_id'               => $option_query->row['option_id'],
                                                        'option_value_id'         => $option_value_query->row['option_value_id'],
                                                        'name'                    => $option_query->row['name'],
                                                        'option_value'            => $option_value_query->row['name'],
                                                        'type'                    => $option_query->row['type'],
                                                        'quantity'                => $option_value_query->row['quantity'],
                                                        'subtract'                => $option_value_query->row['subtract'],
                                                        'price'                   => $option_value_query->row['price'],
                                                        'price_prefix'            => $option_value_query->row['price_prefix'],
                                                        'points'                  => $option_value_query->row['points'],
                                                        'points_prefix'           => $option_value_query->row['points_prefix'],
                                                        'weight'                  => $option_value_query->row['weight'],
                                                        'weight_prefix'           => $option_value_query->row['weight_prefix']
                                                    );								
                                                }
                                            }						
                                        } elseif ($option_query->row['type'] == 'text' || $option_query->row['type'] == 'textarea' || $option_query->row['type'] == 'file' || $option_query->row['type'] == 'date' || $option_query->row['type'] == 'datetime' || $option_query->row['type'] == 'time') {
                                            $option_data[] = array(
                                                'product_option_id'       => $product_option_id,
                                                'product_option_value_id' => '',
                                                'option_id'               => $option_query->row['option_id'],
                                                'option_value_id'         => '',
                                                'name'                    => $option_query->row['name'],
                                                'option_value'            => $option_value,
                                                'type'                    => $option_query->row['type'],
                                                'quantity'                => '',
                                                'subtract'                => '',
                                                'price'                   => '',
                                                'price_prefix'            => '',
                                                'points'                  => '',
                                                'points_prefix'           => '',								
                                                'weight'                  => '',
                                                'weight_prefix'           => ''
                                            );						
                                        }
                                    }
                                } 
							}
						
							$customer_group_id = $customer['customer_group_id'];
												
							$price = $product_query->row['price'];
							
							// Product Discounts
							$discount_quantity = 0;
							
							foreach (unserialize($customer['cart']) as $key_2 => $quantity_2) {
								$product_2 = explode(':', $key_2);
								
								if ($product_2[0] == $product_id) {
									$discount_quantity += $quantity_2;
								}
							}
							
							$product_discount_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_discount WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND quantity <= '" . (int)$discount_quantity . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY quantity DESC, priority ASC, price ASC LIMIT 1");
							
							if ($product_discount_query->num_rows) {
								$price = $product_discount_query->row['price'];
							}
							
							// Product Specials
							$product_special_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_special WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY priority ASC, price ASC LIMIT 1");
						
							if ($product_special_query->num_rows) {
								$price = $product_special_query->row['price'];
							}						
					
							// Reward Points
							$product_reward_query = $this->db->query("SELECT points FROM " . DB_PREFIX . "product_reward WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "'");
							
							if ($product_reward_query->num_rows) {	
								$reward = $product_reward_query->row['points'];
							} else {
								$reward = 0;
							}
							
							// Downloads		
							$download_data = array();     		
							
							$download_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_to_download p2d LEFT JOIN " . DB_PREFIX . "download d ON (p2d.download_id = d.download_id) LEFT JOIN " . DB_PREFIX . "download_description dd ON (d.download_id = dd.download_id) WHERE p2d.product_id = '" . (int)$product_id . "' AND dd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
						
							foreach ($download_query->rows as $download) {
								$download_data[] = array(
									'download_id' => $download['download_id'],
									'name'        => $download['name'],
									'filename'    => $download['filename'],
									'mask'        => $download['mask'],
									'remaining'   => $download['remaining']
								);
							}
							
							// Stock
							if (!$product_query->row['quantity'] || ($product_query->row['quantity'] < $quantity)) {
								$stock = false;
							}
							
							$customer_cart[$key] = array(
								'key'             => $key,
								'product_id'      => $product_query->row['product_id'],
								'name'            => $product_query->row['name'],
								'model'           => $product_query->row['model'],
								'shipping'        => $product_query->row['shipping'],
								'image'           => $product_query->row['image'],
								'option'          => $option_data,
								'download'        => $download_data,
								'quantity'        => $quantity,
								'minimum'         => $product_query->row['minimum'],
								'subtract'        => $product_query->row['subtract'],
								'stock'           => $stock,
								'price'           => ($price + $option_price),
								'total'           => ($price + $option_price) * $quantity,
								'reward'          => $reward * $quantity,
								'points'          => ($product_query->row['points'] ? ($product_query->row['points'] + $option_points) * $quantity : 0),
								'tax_class_id'    => $product_query->row['tax_class_id'],
								'weight'          => ($product_query->row['weight'] + $option_weight) * $quantity,
								'weight_class_id' => $product_query->row['weight_class_id'],
								'length'          => $product_query->row['length'],
								'width'           => $product_query->row['width'],
								'height'          => $product_query->row['height'],
								'length_class_id' => $product_query->row['length_class_id'],
								'tax'             => 0			
							);
							
						$total_cart += ($price + $option_price) * $quantity;
						
						} else {
							//$this->remove($key);
						}
					}
			  
			  $customer_cart['cart_order_total'] = $total_cart;
			  
			  if(count($customer_cart)==0){
				$customer_cart[0] = array(
					'key'             => 0,
					'product_id'      => 0,
					'name'            => 'Cannot Retrieve Product. May have already been deleted from database.',
					'model'           => '-',
					//'shipping'        => $product_query->row['shipping'],
					//'image'           => $product_query->row['image'],
					//'option'          => $option_data,
					//'download'        => $download_data,
					'quantity'        => $quantity,
					//'minimum'         => $product_query->row['minimum'],
					//'subtract'        => $product_query->row['subtract'],
					//'stock'           => $stock,
					'price'           => 'Cannot Retrieve',
					'total'           => 'Cannot Retrieve',
					//'reward'          => $reward * $quantity,
					//'points'          => ($product_query->row['points'] ? ($product_query->row['points'] + $option_points) * $quantity : 0),
					//'tax_class_id'    => $product_query->row['tax_class_id'],
					//'weight'          => ($product_query->row['weight'] + $option_weight) * $quantity,
					//'weight_class_id' => $product_query->row['weight_class_id'],
					//'length'          => $product_query->row['length'],
					//'width'           => $product_query->row['width'],
					//'height'          => $product_query->row['height'],
					//'length_class_id' => $product_query->row['length_class_id']					
				);
			  }
			return $customer_cart;
		}

     ]]></add>      
    </operation>
  </file>  
</modification>
